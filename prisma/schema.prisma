generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Testing {
  id   String @id @default(uuid())
  test String
}

enum roles {
  public
  customer
  manager
  admin
}

enum PaymentStatus {
  requires_capture
  pending_creation
  requires_payment_method
  requires_confirmation
  requires_action
  processing
  succeeded
  canceled
}

enum OrderStatus {
  awaiting_payment
  pending_fulfillment
  fulfillment_in_progress
  shipped
  delivered
  delivery_cancelled
  returned
}

enum BackgroundJobStatus {
  pending
  locked
  processing
  success
  error
}

model Users {
  id                                 String            @id @default(uuid()) @db.Uuid
  first_name                         String            @db.VarChar(60)
  last_name                          String            @db.VarChar(120)
  email                              String            @unique
  password                           String            @db.Char(60)
  created_at                         DateTime          @default(now())
  role                               roles             @default(customer)
  failed_login_attempts              Int               @default(0)
  failed_login_attempts_timestamps   DateTime[]        @default([])
  session_token                      String?
  login_at                           DateTime?         @db.Timestamp()
  logout_at                          DateTime?         @db.Timestamp()
  password_reset_requests            Int               @default(0)
  password_reset_requests_timestamps DateTime[]        @default([])
  password_reset_token               String?
  password_last_updated              DateTime          @default(now())
  likes_products                     LikesOfProducts[]
  CartItems                          CartItems[]
  Orders                             Orders[]
}

model Categories {
  id       String     @id @default(uuid())
  name     String     @unique
  Products Products[]
}

model Products {
  id              String              @id @default(uuid()) @db.Uuid
  is_published    Boolean             @default(false)
  is_deleted      Boolean             @default(false)
  name            String
  description     String
  variations      ProductVariations[]
  categories      Categories[]
  created_by      String              @db.Uuid
  created_at      DateTime            @default(now())
  last_updated_by String?             @db.Uuid
  last_updated_at DateTime?           @db.Timestamp()
}

model ProductVariations {
  id              String            @id @default(uuid()) @db.Uuid
  title           String
  price           Decimal           @db.Money
  stock           Int               @db.Integer
  product         Products?         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id      String?           @db.Uuid
  last_updated_by String?           @db.Uuid
  last_updated_at DateTime?         @db.Timestamp()
  images          Images[]
  LikesOfProducts LikesOfProducts[]
  CartItems       CartItems[]
  OrderItems      OrderItems[]
}

model LikesOfProducts {
  id                      String             @id @default(uuid()) @db.Uuid
  liked_by                Users?             @relation(fields: [user_id], references: [id])
  user_id                 String?            @db.Uuid
  likes_product_variation ProductVariations? @relation(fields: [product_variation_id], references: [id])
  product_variation_id    String?            @db.Uuid

  @@unique([user_id, product_variation_id])
}

model Images {
  id                   String             @id @default(uuid()) @db.Uuid
  cdn_id               String
  url                  String
  created_at           DateTime           @default(now()) @db.Timestamp()
  product_variation    ProductVariations? @relation(fields: [product_variation_id], references: [id], onDelete: Cascade)
  product_variation_id String?            @db.Uuid
}

model CartItems {
  id                   String             @id @default(uuid()) @db.Uuid
  cart_owner           Users?             @relation(fields: [user_id], references: [id])
  user_id              String?            @db.Uuid
  product_variation    ProductVariations? @relation(fields: [product_variation_id], references: [id])
  product_variation_id String?            @db.Uuid
  quantity             Int                @db.Integer

  @@unique([user_id, product_variation_id])
}

model Orders {
  id                      String                    @id @default(uuid()) @db.Uuid
  user                    Users?                    @relation(fields: [user_id], references: [id])
  user_id                 String?                   @db.Uuid
  paymentStatus           PaymentStatus             @default(pending_creation)
  orderStatus             OrderStatus               @default(awaiting_payment)
  createdAt               DateTime                  @default(now())
  order_items             OrderItems[]
  PaymentIntents          PaymentIntents[]
  IncomingPaymentWebhooks IncomingPaymentWebhooks[]
}

model OrderItems {
  id                   String             @id @default(uuid()) @db.Uuid
  order                Orders?            @relation(fields: [order_id], references: [id])
  order_id             String?            @db.Uuid
  product_variation    ProductVariations? @relation(fields: [product_variation_id], references: [id])
  product_variation_id String?            @db.Uuid
  quantity             Int                @db.Integer
  price_purchased_at   Decimal            @db.Decimal()
}

model PaymentIntents {
  id                    String        @id @default(uuid()) @db.Uuid
  order                 Orders?       @relation(fields: [order_id], references: [id])
  order_id              String?       @db.Uuid
  status                PaymentStatus @default(pending_creation)
  created_at            DateTime      @default(now())
  stripe_event_id       String?
  stripe_payment_intent Json?         @db.Json
}

model IncomingPaymentWebhooks {
  id           String    @id @default(uuid()) @db.Uuid
  order        Orders    @relation(fields: [order_id], references: [id])
  order_id     String    @db.Uuid
  data         Json      @db.Json
  created_at   DateTime  @default(now()) @db.Timestamp()
  processed_at DateTime? @db.Timestamp()
}
