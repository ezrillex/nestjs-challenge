# Entrypoint Query / Mutations
type Query {
    # ISSUES RESOLVING NESTED QUERIES, OPTING FOR TOP LEVEL AS I DONT HAVE A SOLUTION AND HAVE LIMITED TIME
    # Error: Query.publicQuery.getPublicProducts defined in resolvers, but not in schema ...
    # used by system / workers
#    systemQuery: SystemQuery
#    authorizedQuery(role: ID!): AuthorizedQuery
#    publicQuery: PublicQuery

    # PUBLIC
    getPublicProducts(input: GetProductsInput!): GetProductsPayload!
    getPublicProduct(input: ID!): GetProductPayload!
    # getting files is uncommon. Expectation is to include file links in related queries.
    # if not found then is null, no error is raised.
    getFile(input: ID!): Files
    getFiles(input: [ID!]!): [Files]!

    # SYSTEM
    # Payment STEP 4a - for worker, webhook only ingested the raw data from stripe.
    getPaymentsToProcess: [ID!]
    getLastLikesLowStock: [Likes!]
    getEmailJobs(input: GetEmailJobsInput!): GetEmailJobsPayload!

    #AUTHORIZED
    getLikes(input: GetLikesInput!): LikesPayload!
    getCartInfo(client: ID!): CartInfoPayload!
    listAllOrders(first: Int!, offset: Int!): allOrderDetailsPayload!
    orderDetails(order: ID!): orderDetailsPayload!
    getAuthorizedProducts(input: GetProductsInput!): GetProductsPayload!
    getAuthorizedProduct(input: ID!): GetProductPayload!
    userHasPermission(input: UserHasPermissionInput!): UserHasPermissionPayload!
}
#type SystemQuery {
#
#}
#type AuthorizedQuery {
#
#}
#type PublicQuery {
#
#}

type Mutation {
    # same issues as above

    # used by system / workers
#    systemMutation: SystemMutation
#    authorizedMutation(role: ID!): AuthorizedMutation
#    publicMutation: PublicMutation

    # SYSTEM
    createSystemEmailJob(input: CreateEmailJobInput!): ValidatedResponsePayload!
    updateEmailJob(input: UpdateEmailJobInput!): UpdateEmailJobPayload!
    lowStockPromotionsCronJob: BaseResponsePayload!
    # Payment STEP 3 - comes from an API Gateway or a REST endpoint that passes it to graphql as GQL is not supported by Stripe.
    stripePaymentWebhook(stripeWebhookJSON: String!): BaseResponsePayload! # The basic one as to fail to one http code only.
    # Payment STEP 4b - Locks the current payment to process and returns the record.
    lockPayment(id: ID!): LockPaymentPayload!
    # Payment STEP 4c - Worker updates the necessary fields, regarding the payment itself it will just update status.
    processPayment(input: ProcessPaymentInput!): BaseResponsePayload!

    # AUTHORIZED

    likeProduct(input: LikeProductInput!): BaseResponsePayload!
    removeLike(input: RemoveLikeInput): BaseResponsePayload!
    # only managers in edge cases will use this, because emails are mostly send from other endpoints so most will be system.
    createAuthorizedEmailJob(
        input: CreateEmailJobInput!
    ): ValidatedResponsePayload!
    addToCart(input: AddToCartInput! ): BaseResponsePayload!
    removeFromCart(input: RemoveFromCartInput! ): BaseResponsePayload!
    modifyQuantityCart(input: ModifyCartQuantity!): BaseResponsePayload!
    createOrder(input: CreateOrderInput): ValidatedResponsePayload!
    createProduct(input: CreateProductInput!): ValidatedResponsePayload!
    deleteProduct(input: ID!): BaseResponsePayload!
    updateProduct(input: UpdateProductInput!): ValidatedResponsePayload!
    # Payment STEP 1
    createPayment(input: CreatePaymentInput!): ValidatedResponsePayload!
    updatePaymentDetails(
        input: UpdatePaymentDetailsInput!
    ): ValidatedResponsePayload!

    createFile(input: CreateFileInput!): BaseResponsePayload!
    deleteFile(input: ID!): BaseResponsePayload!
    logoutUser(token: String!): ValidatedResponsePayload!

    # PUBLIC
    createUser(input: CreateUserInput!): ValidatedResponsePayload!
    loginUser(input: UserLoginInput): LoginUserPayload!
    forgotPassword(email: String!): ValidatedResponsePayload!
    resetPassword(input: UserResetPassword!): ValidatedResponsePayload!
}
#type SystemMutation {
#
#}
#type AuthorizedMutation {
#
#}
#type PublicMutation {
#
#}

# CUSTOM Scalars
scalar Timestamp # ISO formatted time string
scalar Email
scalar JSON
scalar Token # string with a fixed length of 64
scalar Hash # md5 32 char long string that has been hashed and salted
# REUSABLE / INHERITABLE components
#region
# resolves to a single type of error or condition
interface IBaseResponsePayload {
    code: ResponseCodes!
    description: String!
}
# resolves to a single type of error or condition
type BaseResponsePayload {
    code: ResponseCodes!
    description: String!
}
# can return multiple kinds of errors at once
interface IBaseValidatedResponsePayload {
    validationErrors: [String!]
    conditionErrors: [String!]
    code: ResponseCodes!
    description: String
}
# can return multiple kinds of errors at once
type ValidatedResponsePayload {
    validationErrors: [String!]
    conditionErrors: [String!]
    code: ResponseCodes!
    description: String
}
interface PaginationPayload {
    count: Int!
    totalCount: Int!
    currentPage: Int!
    totalPages: Int!
    next: Boolean!
    previous: Boolean!
}
#endregion

# ENUMS
#region
enum OrderStatus {
    pending_fulfillment
    fulfillment_in_progress
    shipped
    delivered
    delivery_cancelled
    returned
}

enum QueueStatus {
    pending
    in_progress
    success
    failed
}

enum PaymentStatus {
    requires_payment_method
    requires_confirmation
    requires_action
    processing
    succeded
    cancelled
}

enum WebhookStatus {
    pending
    batched_locked
    processing
    done
    error
}

enum ResponseCodes {
    ok
    validation_error
    condition_error
    authentication_error
    permission_error
    not_found_error
    server_error
    many_error
}

enum TableEntities {
    Roles
    Users
    Permits
    Permissions
    Categories
    Files
    PaymentIntents
    IncomingPaymentWebhooks
    PaymentIntentsAudit
    Products
    ProductVariations
    Orders
    OrderAudit
    OrderDetails
    Carts
    EmailQueue
    Likes
}
#endregion

type Roles {
    id: ID!
    name: String!
}

# USERS/Auth ENDPOINTS
#region
type Users {
    firstName: String!
    lastName: String!
    id: ID!
    email: Email!
    sessionToken: Token
    role: Roles!
    createdAt: Timestamp!
    lastLoginAt: Timestamp
    lastSignoutAt: Timestamp
    password: Hash!
    passwordLastUpdated: Timestamp!
    failedLoginAttempts: Int!
    failedLoginAttemptsTimestamps: [Timestamp!] # the list is not required as it can be empty
    passwordResetToken: Token
    passwordResetRequestsCount: Int!
    passwordResetRequestsTimestamps: [Timestamp!]
}
# POST CREATE USER
input CreateUserInput {
    firstName: String!
    lastName: String!
    email: Email!
    password: Hash!
    repeatPassword: Hash!
}

# POST LOGIN
input UserLoginInput {
    email: Email!
    password: Hash!
}

# POST RESET
input UserResetPassword {
    resetToken: Token!
    newPassword: Hash!
    repeatNewPassword: Hash!
}

type LoginUserPayload implements IBaseValidatedResponsePayload {
    code: ResponseCodes!
    validationErrors: [String!]
    description: String
    conditionErrors: [String!]
    token: Token
}
#endregion

# Permission endpoints
#region

# presence of permit here means the user IS GRANTED that permission
type Permits {
    id: ID!
    role: Roles!
    permit: Permissions!
}

type Permissions {
    id: ID!
    name: String!
    appliesToTable: TableEntities!
    appliesToField: String # field in table
}

#
input UserHasPermissionInput {
    user: ID # if no id is passed, assumes anonymous, check permits for public role
    permission: ID!
}

type UserHasPermissionPayload implements IBaseResponsePayload {
    isAllowed: Boolean!
    description: String!
    code: ResponseCodes!
}

#endregion

type Categories {
    id: ID!
    name: String!
}

# Files endpoints
#region
type Files {
    id: ID!
    name: String!
    size: Int!
    url: String!
    createdAt: Timestamp!
}
# UPLOAD A FILE
input CreateFileInput {
    name: String!
    base64: String!
}

#endregion

# PAYMENTS ENDPOINTS
#region
type PaymentIntents {
    id: ID!
    closed: Boolean!
    paymentStatus: PaymentStatus!
    createdAt: Timestamp!
    stripeEventId: String!
    stripeApiVersion: String!
    stripePaymentIntent: JSON!
    audit: [PaymentIntentsAudit!]!
}

type IncomingPaymentWebhooks {
    id: ID!
    status: WebhookStatus!
    data: JSON!
    createdAt: Timestamp!
    processedAt: Timestamp
}

type PaymentIntentsAudit {
    id: ID!
    snapshotAt: Timestamp!
    # same as payment intent values
    closed: Boolean!
    paymentStatus: PaymentStatus!
    stripeEventId: String!
    stripeApiVersion: String!
    stripePaymentIntent: JSON
}

input CreatePaymentInput {
    order: ID!
    stripeApiVersion: String # defaults to 4.3 for example
    amount: Float
    currency: String!
}

# step 2 of payment lifecycle, only these are expected here as this will update de object with stripe.
input UpdatePaymentDetailsInput {
    cardNumber: String!
    expiryDate: String!
    cvc: String!
    confirmed: Boolean!
}

input ProcessPaymentInput {
    closed: Boolean
    status: ID
}

type LockPaymentPayload implements IBaseResponsePayload {
    description: String!
    code: ResponseCodes!
    payment: PaymentIntents
}

#endregion

# PRODUCTS ENDPOINTS
#region
type Products {
    id: ID!
    disabled: Boolean!
    name: String!
    details: String!
    categories: [Categories!]!
    variations: [ProductVariations!]!
    createdBy: Users!
    createdAt: Timestamp!
    lastUpdatedBy: Users
    lastUpdatedAt: Timestamp
    images: [Files!] # list not required as item could not have an image (i.e. unpublished in progress)
    deleted: Boolean!
}

type ProductVariations {
    id: ID!
    title: String!
    price: Float!
    stock: Int!
    images: [Files!]
    published: Boolean!
    deleted: Boolean!
}

input GetProductsInput {
    first: Int!
    offset: Int!
    categoryFilter: [ID!]
    search: String
    likedOnly: Boolean
    omitImages: Boolean
    sort: String
}

type GetProductsPayload implements IBaseValidatedResponsePayload & PaginationPayload {
    products: [Products!]
    count: Int!
    totalCount: Int!
    currentPage: Int!
    totalPages: Int!
    next: Boolean!
    previous: Boolean!
    code: ResponseCodes!
    conditionErrors: [String!]
    description: String
    validationErrors: [String!]
}

input CreateProductInput {
    name: String!
    details: String!
    categories: [ID!]!
    variations: [CreateProductVariationInput!]!
}

input CreateProductVariationInput {
    price: Float!
    stock: Int!
    title: String!
    description: String!
    images: [ID!]
}

type GetProductPayload implements IBaseResponsePayload {
    code: ResponseCodes!
    description: String!
    product: Products
}
# nothing required, if not received assumed no change.
input UpdateProductInput {
    disabled: Boolean
    name: String
    details: String
    categories: [ID!]
    price: Float
    stock: Int
    images: [ID!]
}
#endregion

# Orders endpoints
#region
type Orders {
    id: ID!
    client: Users
    payments: [PaymentIntents!]
    webhooks: [IncomingPaymentWebhooks!]
    orderDetails: [OrderDetails!]!
    paymentStatus: PaymentStatus!
    orderStatus: OrderStatus!
    createdAt: Timestamp!
    orderStatusHistory: [OrderAudit!]!
}

type OrderAudit {
    id: ID!
    order: OrderStatus!
    payment: PaymentStatus!
    changeAt: Timestamp!
}

type OrderDetails {
    id: ID!
    order: Orders!
    product: Products!
    variation: ProductVariations!
    productQuantity: Int!
    pricePurchasedAt: Float!
}

type ListAllOrderdsPayload implements IBaseResponsePayload {
    orders: [Orders!]
    description: String!
    code: ResponseCodes!
}

input CreateOrderInput {
    itemsToBuy: [ID!] #cart ids / selected items to buy, allow for leaving things in the cart.
    otherInfo: String! # shipping maybe? to be defined.
}

type allOrderDetailsPayload implements IBaseResponsePayload {
    description: String!
    code: ResponseCodes!
    orders: [Orders!]
}

type orderDetailsPayload implements IBaseResponsePayload {
    order: Orders!
    code: ResponseCodes!
    description: String!
}

#endregion

# CART ENDPOINTS
#region
type Carts {
    id: ID!
    client: Users!
    product: Products!
    variation: ProductVariations!
    productQuantity: Int!
    createdAt: Timestamp!
}
type CartInfoPayload implements IBaseResponsePayload {
    cart: [Carts!]
    code: ResponseCodes!
    description: String!
}

input AddToCartInput {
    client: ID!
    product: ID!
    variation: ID!
    quantity: Int!
}

input RemoveFromCartInput {
    client: ID!
    product: ID!
    variation: ID!
}

input ModifyCartQuantity {
    client: ID!
    product: ID!
    variation: ID!
    newQuantity: Int!
}

#endregion

# Mailer Service Endpoints
#region
type EmailQueue {
    id: ID!
    queueStatus: QueueStatus!
    senderName: String
    senderEmail: Email!
    recipientName: String
    recipientEmail: Email!
    replyTo: Email
    subject: String!
    textContent: String!
    htmlContent: String!
    attachments: [Files!]
}
# POST Email Job
input CreateEmailJobInput {
    senderName: String
    senderEmail: Email!
    recipientName: String
    recipientEmail: Email!
    replyToEmail: Email
    subject: String
    textContent: String!
    htmlContent: String!
    attachments: [ID!]
}

# GET EMAIL JOBS (worker endpoint)
input GetEmailJobsInput {
    limit: Int!
    status: ID! # id of status to filter by
}
type GetEmailJobsPayload {
    jobs: [ID!] # NOT returning the jobs themselves as the worker would spike in memory usage. I rather it be chatty,
    #specially when the rate of the worker is defined by parameters and is fixed. Thus N+1 is not out of control.
    # another way could be to paginate to like 3 items, but still query should be converted to mutation if I want to also lock them.
    count: Int!
}

# PUT / UPDATE EMAIL STATUS (worker endpoint)
input UpdateEmailJobInput {
    jobId: ID!
    newStatus: ID!
}
type UpdateEmailJobPayload implements IBaseResponsePayload {
    description: String!
    code: ResponseCodes!
    jobData: EmailQueue!
}

#endregion

# Likes endpoints
#region
type Likes {
    id: ID!
    client: Users!
    product: Products!
    variation: ProductVariations!
    createdAt: Timestamp!
}
# GET LIKES
input GetLikesInput {
    user: ID!
}
type LikesPayload {
    errors: String
    likes: Likes
}

# LIKE A PRODUCT and REMOVE A LIKED PRODUCT
input LikeProductInput {
    product: ID!
    variation: ID!
    user: ID!
}
# for convinience just say what product and variation to remove the like from, this saves handling the like ID on front.
input RemoveLikeInput {
    product: ID!
    variation: ID!
}

#endregion