// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OrdersService createOrder should throw an error if deletion count is 0: error unexpected when deleting 1`] = `"Transaction failed: An error occurred when creating the order!"`;

exports[`OrdersService createOrder should throw an error if there are no items in the cart: error no items in the cart 1`] = `"User has no items in cart!"`;

exports[`OrdersService createOrder should unroll cart item IDs and send a valid query for order creation: create order return 1`] = `
{
  "id": "1",
}
`;

exports[`OrdersService createOrder should unroll cart item IDs and send a valid query for order creation: query of delete many test 1`] = `
[
  {
    "where": {
      "id": {
        "in": [
          "some id",
          "some id 2",
        ],
      },
    },
  },
]
`;

exports[`OrdersService createOrder should unroll nested product info and send a valid order creation query: error ocurred when creating order 1`] = `"Transaction failed: An error occurred when creating the order!"`;

exports[`OrdersService createOrder should unroll nested product info and send a valid order creation query: query of order creation test 1`] = `
{
  "data": {
    "order_items": {
      "createMany": {
        "data": [
          {
            "price_purchased_at": 34,
            "product_variation_id": "prod var 1",
            "quantity": 1,
          },
          {
            "price_purchased_at": 343,
            "product_variation_id": "prod var 2",
            "quantity": 4,
          },
        ],
      },
    },
    "user": {
      "connect": {
        "id": "testing_user_id",
      },
    },
  },
}
`;

exports[`OrdersService getOrder should include order ID and client in the query: get one order result 1`] = `
{
  "where": {
    "id": "testing_user_id",
    "user_id": "testing_client_id",
  },
}
`;

exports[`OrdersService getOrders should query all orders with pagination and filter by client id if role is manager and client id is provided: called with manager query, filter by client id 1`] = `
[
  [
    {
      "skip": 0,
      "take": 10,
      "where": {
        "user_id": "2730fc05-6f87-49e5-8a41-559208048ebe",
      },
    },
  ],
]
`;

exports[`OrdersService getOrders should query all orders with pagination and filter by client id if role is manager and client id is provided: role manager result 1`] = `
{
  "skip": 0,
  "take": 10,
  "where": {
    "user_id": "2730fc05-6f87-49e5-8a41-559208048ebe",
  },
}
`;

exports[`OrdersService getOrders should query all orders with pagination if the role is manager: called with manager query 1`] = `
[
  [
    {
      "skip": 0,
      "take": 10,
    },
  ],
]
`;

exports[`OrdersService getOrders should query all orders with pagination if the role is manager: role manager result 1`] = `
{
  "skip": 0,
  "take": 10,
}
`;

exports[`OrdersService getOrders should query orders for the user if the role is customer: role customer result 1`] = `
{
  "skip": 0,
  "take": 10,
  "where": {
    "user_id": "the_user_id",
  },
}
`;

exports[`OrdersService getOrders should query orders for the user if the role is customer: user filtered by itself, w/pagination 1`] = `
[
  [
    {
      "skip": 0,
      "take": 10,
      "where": {
        "user_id": "the_user_id",
      },
    },
  ],
]
`;
